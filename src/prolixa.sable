Package prolixa;

Helpers
 rc = 13;
 nl = 10;
 tab = 9;

 // Caracteres
  letra_maiuscula = ['A' .. 'Z'];
  letra_minuscula = ['a' .. 'z'];
  letra_acentos = ['À' .. 'ÿ'];
  letra = (letra_minuscula | letra_maiuscula);
  digitos = ['0' .. '9'];
  underline = '_';
  espaco = ' ';
  aspas_simples = 39;
  aspas_duplas = 34;
  all = [0 .. 0xFFFF];
  contrabarra = '\';
  
  abre_chaves = '{';
  fecha_chaves = '}';
  abre_parenteses = '(';
  fecha_parenteses = ')';
  ponto = '.';
  virgula = ',';
  dois_pontos = ':';
  ponto_e_virgula = ';';
  abre_colchetes = '[';
  fecha_colchetes = ']';
  
  
  identificador = letra_maiuscula (letra | underline)*;
  
  vazio = (espaco | rc | nl | tab)+;
 
Tokens
 // Palavras reservadas
 
 //Start
 this = 'This';
 is = 'is';
 program = 'program';
 
 //Declarações
 it = 'It';
 presents = 'presents';
 
 of = 'of'; // De of type
 
 alterable = 'alterable';
 unalterable = 'unalterable';
 vector = 'vector';
 xmatriz = 'x';

 //Begin
 let = 'Let';
 us = 'us';
 begin = 'begin';
 
 //End Begin
 beginthat= 'That';
 would = 'would';
 be = 'be';
 all = 'all';
 
// Just in case that do
just  = 'just';
in  = 'in';
case  = 'case';
that  = 'that';
do = 'do';

otherwise = 'otherwise';

// As long as
as = 'as';
long = 'long';

// Considering
considering = 'considering';
from = 'from';
to = 'to';
by = 'by';

abandon = 'abandon';

//Go to next iteration
go = 'go';
next = 'next';
iteration = 'iteration';

//Comando
capture  = 'capture';
show  = 'show';

 // Extras
 ponto = ponto;
 dois_pontos = dois_pontos;
 ponto_e_virgula = ponto_e_virgula;
 abre_parenteses = abre_parenteses;
 fecha_parenteses = fecha_parenteses;
abre_colchetes = abre_colchetes;
fecha_colchetes = fecha_colchetes;

 virgula = virgula;
 

 // Identificador
 id = identificador;

 // Tipos primitivos
 symbol = aspas_simples (contrabarra all | all)? aspas_simples;
 answer = 'yes' | 'no';
 number = (digitos+ | digitos+ ponto digitos+);

tipo = ('answer' | 'symbol' | 'number');

 // Vetor
 symbol_vector = aspas_duplas [all - aspas_duplas]* aspas_duplas;
 
 //Operadores
 igual = '=';
 atribuicao = ':=';
 multiplicacao = '*';
 divisao = '/';
 subtracao = '-';
 soma = '+';
 resto = '//';
 comparacao = '==';
 diferenca = '!=';
 menorqueigual = '<=';
 maiorqueigual = '>=';
 menorque = '<';
 maiorque = '>';
 negacao = '!';
 and = 'and';
 or = 'or';
 xor = 'xor';
 
 // Comentário
 comment = abre_chaves [all - fecha_chaves]+ fecha_chaves;

 
 vazio = vazio;

Ignored Tokens
 vazio;

Productions
	
	    start = programx itpresents? declarations? letus logica endmaker;
	
	    programx = this is program id ponto;
	    itpresents = it presents dois_pontos;
	    letus = let us begin dois_pontos;
	    endmaker = that would be be allkw ponto;
	
	    inicializacao_alterable = alterable tipo id ponto_e_virgula;
	    inicializacao_unalterable = unalterable tipo id ponto_e_virgula;
	    declarations = (inicializacao_alterable | inicializacao_unalterable)+;
	
	    logica = ponto;
