Package prolixa;

Helpers
 rc = 13;
 nl = 10;

 // Caracteres
  letra_maiuscula = ['A' .. 'Z'];
  letra_minuscula = ['a' .. 'z'];
  letra = letra_minuscula | letra_minuscula;
  digitos = ['0' .. '9'];
  underline = '_';
  espaco = ' ';
  aspas_simples = 39;
  aspas_duplas = 34;
  all = [0 .. 0xFFFF];
  contrabarra = '\';
  
  abre_chaves = '{';
  fecha_chaves = '}';
  abre_parenteses = '(';
  fecha_parenteses = ')';
  ponto = '.';
  virgula = ',';
  dois_pontos = ':';
  ponto_e_virgula = ';';
  
  
  identificador = letra_maiuscula (letra_maiuscula | letra_minuscula | underline)*;
  
 
Tokens
 // Palavras reservadas
 
 //Start
 this = 'This';
 is = 'is';
 program = 'program';
 
 //Declarações
 it = 'It';
 presents = 'presents';
 
 of = 'of'; // De of type
 
 alterable = 'alterable';
 unalterable = 'unalterable';
 vector = 'vector';

 //Begin
 let = 'Let';
 us = 'us';
 begin = 'begin';
 
 //End Begin
 that = 'That';
 would = 'would';
 be = 'be';
 all = 'all';
 
 // Extras
 ponto = ponto;
 dois_pontos = dois_pontos;
 ponto_e_virgula = ponto_e_virgula;
 abre_parenteses = abre_parenteses;
 fecha_parenteses = fecha_parenteses;
 virgula = virgula;
 

 // Identificador
 id = identificador;

 // Tipos primitivos
 symbol = aspas_simples (contrabarra all | all) aspas_simples;
 answer = 'yes' | 'no';
 number = (digitos+ | digitos+ ponto digitos+);

 // Outro tipo
 string = aspas_duplas all+ aspas_duplas; // Analisar isso porque o comportamento é ir até a ultima aspas duplas e não, parar no primeiro par de aspas
 //Operadores
 igual = '=';
 
 // Comentário
 comment = abre_chaves all+ fecha_chaves;

 
 vazio = (espaco | rc | nl)+;

Ignored Tokens
 vazio;